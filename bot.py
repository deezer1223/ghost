import asyncio
import logging
import random
import json
import sqlite3
from urllib.parse import quote, unquote

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, Chat
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

# keep_alive.py dosyanƒ±z varsa bu satƒ±rƒ± aktif bƒ±rakƒ±n
# from keep_alive import keep_alive
# keep_alive()

logging.basicConfig(level=logging.INFO)

# --- CONFIGURATION ---
API_TOKEN = '8101973697:AAEbl3UWWeP_NyAn_l8wjQ_1FjVJcTauR_o'
SUPER_ADMIN_ID = 7877979174  # Bu sizin ana admin ID'niz
DB_FILE = "bot_database.sqlite"  # Veritabanƒ± dosyasƒ±
# --- END CONFIGURATION ---

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)

# Aktif sohbetleri ve yardƒ±m isteklerini izlemek i√ßin
ACTIVE_CHATS = {}  # {user_id: admin_id}
HELP_REQUESTS = {}  # {user_id: [(admin_id, message_id), ...]}


back_to_admin_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è Admin panele ga√Ωtmak", callback_data="admin_panel_main")]
])

# --- Durumlar (States) ---
class SubscriptionStates(StatesGroup):
    checking_subscription = State()

class ChatStates(StatesGroup):
    in_chat = State()

class AdminStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_to_delete = State()
    waiting_for_vpn_config = State()
    waiting_for_vpn_config_to_delete = State()
    waiting_for_welcome_message = State()
    waiting_for_user_mail_action = State()
    waiting_for_mailing_message = State()
    waiting_for_mailing_confirmation = State()
    waiting_for_mailing_buttons = State()
    waiting_for_channel_mail_action = State()
    waiting_for_channel_mailing_message = State()
    waiting_for_channel_mailing_confirmation = State()
    waiting_for_channel_mailing_buttons = State()
    waiting_for_admin_id_to_add = State()
    waiting_for_addlist_url = State()
    waiting_for_addlist_name = State()

# --- Veritabanƒ± ƒ∞≈ülemleri (SQLite) ---

def db_connect():
    """Veritabanƒ± baƒülantƒ±sƒ± ve cursor olu≈üturur."""
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """Veritabanƒ± tablolarƒ±nƒ± olu≈üturur."""
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS bot_settings (key TEXT PRIMARY KEY, value TEXT);")
        cursor.execute("CREATE TABLE IF NOT EXISTS channels (id INTEGER PRIMARY KEY AUTOINCREMENT, channel_id TEXT UNIQUE NOT NULL, name TEXT NOT NULL);")
        cursor.execute("CREATE TABLE IF NOT EXISTS addlists (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, url TEXT UNIQUE NOT NULL);")
        cursor.execute("CREATE TABLE IF NOT EXISTS vpn_configs (id INTEGER PRIMARY KEY AUTOINCREMENT, config_text TEXT UNIQUE NOT NULL);")
        cursor.execute("CREATE TABLE IF NOT EXISTS bot_users (user_id INTEGER PRIMARY KEY);")
        cursor.execute("CREATE TABLE IF NOT EXISTS bot_admins (user_id INTEGER PRIMARY KEY);")
        
        cursor.execute("SELECT 1 FROM bot_settings WHERE key = 'welcome_message'")
        if cursor.fetchone() is None:
            default_welcome = "üëã <b>Ho≈ü geldi≈àiz!</b>\n\nVPN Koduny almak √º√ßin, a≈üakdaky Kanallara Agza bolu≈à we so≈àra '‚úÖ Agza Boldum' d√ºwmesine basy≈à."
            cursor.execute("INSERT INTO bot_settings (key, value) VALUES (?, ?)", ('welcome_message', default_welcome))
        
        conn.commit()
    logging.info("Database initialized successfully with SQLite.")

async def get_setting_from_db(key: str, default: str = None):
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM bot_settings WHERE key = ?", (key,))
        row = cursor.fetchone()
        return row['value'] if row else default

async def save_setting_to_db(key: str, value: str):
    with db_connect() as conn:
        conn.execute("INSERT OR REPLACE INTO bot_settings (key, value) VALUES (?, ?)", (key, value))
        conn.commit()

async def get_channels_from_db():
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT channel_id, name FROM channels ORDER BY name")
        rows = cursor.fetchall()
        return [{"id": row['channel_id'], "name": row['name']} for row in rows]

async def add_channel_to_db(channel_id: str, name: str):
    try:
        with db_connect() as conn:
            conn.execute("INSERT INTO channels (channel_id, name) VALUES (?, ?)", (str(channel_id), name))
            conn.commit()
        return True
    except sqlite3.IntegrityError:
        logging.warning(f"Channel {channel_id} already exists.")
        return False

async def delete_channel_from_db(channel_id: str):
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM channels WHERE channel_id = ?", (str(channel_id),))
        return cursor.rowcount > 0

async def get_addlists_from_db():
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, url FROM addlists ORDER BY name")
        rows = cursor.fetchall()
        return [{"db_id": row['id'], "name": row['name'], "url": row['url']} for row in rows]

async def add_addlist_to_db(name: str, url: str):
    try:
        with db_connect() as conn:
            conn.execute("INSERT INTO addlists (name, url) VALUES (?, ?)", (name, url))
            conn.commit()
        return True
    except sqlite3.IntegrityError:
        logging.warning(f"Addlist URL {url} already exists.")
        return False

async def delete_addlist_from_db(db_id: int):
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM addlists WHERE id = ?", (db_id,))
        return cursor.rowcount > 0

async def get_vpn_configs_from_db():
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, config_text FROM vpn_configs ORDER BY id")
        rows = cursor.fetchall()
        return [{"db_id": row['id'], "config_text": row['config_text']} for row in rows]

async def add_vpn_config_to_db(config_text: str):
    try:
        with db_connect() as conn:
            conn.execute("INSERT INTO vpn_configs (config_text) VALUES (?)", (config_text,))
            conn.commit()
        return True
    except sqlite3.IntegrityError:
        logging.warning(f"VPN config already exists.")
        return False

async def delete_vpn_config_from_db(db_id: int):
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM vpn_configs WHERE id = ?", (db_id,))
        return cursor.rowcount > 0

async def get_users_from_db():
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM bot_users")
        rows = cursor.fetchall()
        return [row['user_id'] for row in rows]

async def add_user_to_db(user_id: int):
    with db_connect() as conn:
        conn.execute("INSERT OR IGNORE INTO bot_users (user_id) VALUES (?)", (user_id,))
        conn.commit()

async def get_admins_from_db():
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM bot_admins")
        rows = cursor.fetchall()
        return [row['user_id'] for row in rows]

async def add_admin_to_db(user_id: int):
    with db_connect() as conn:
        conn.execute("INSERT OR IGNORE INTO bot_admins (user_id) VALUES (?)", (user_id,))
        conn.commit()
    return True

async def delete_admin_from_db(user_id: int):
    with db_connect() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM bot_admins WHERE user_id = ?", (user_id,))
        return cursor.rowcount > 0
        
# --- Yardƒ±mcƒ± Fonksiyonlar ---

async def is_user_admin_in_db(user_id: int) -> bool:
    if user_id == SUPER_ADMIN_ID:
        return True
    admins = await get_admins_from_db()
    return user_id in admins

async def save_last_mail_content(content: dict, keyboard: InlineKeyboardMarkup | None, mail_type: str):
    content_json = json.dumps(content)
    await save_setting_to_db(f'last_{mail_type}_mail_content', content_json)
    if keyboard:
        keyboard_json = json.dumps(keyboard.to_python())
        await save_setting_to_db(f'last_{mail_type}_mail_keyboard', keyboard_json)
    else:
        await save_setting_to_db(f'last_{mail_type}_mail_keyboard', 'null')

async def get_last_mail_content(mail_type: str) -> tuple[dict | None, InlineKeyboardMarkup | None]:
    content, keyboard = None, None
    content_json = await get_setting_from_db(f'last_{mail_type}_mail_content')
    if content_json:
        content = json.loads(content_json)
    keyboard_json = await get_setting_from_db(f'last_{mail_type}_mail_keyboard')
    if keyboard_json and keyboard_json != 'null':
        keyboard_data = json.loads(keyboard_json)
        keyboard = InlineKeyboardMarkup.model_validate(keyboard_data)
    return content, keyboard

async def send_mail_preview(chat_id: int, content: dict, keyboard: InlineKeyboardMarkup | None = None):
    content_type, caption, text, file_id = content.get('type'), content.get('caption'), content.get('text'), content.get('file_id')
    try:
        if content_type == 'text':
            return await bot.send_message(chat_id, text, reply_markup=keyboard, parse_mode="HTML")
        elif content_type == 'photo':
            return await bot.send_photo(chat_id, photo=file_id, caption=caption or '', reply_markup=keyboard, parse_mode="HTML")
        elif content_type == 'video':
            return await bot.send_video(chat_id, video=file_id, caption=caption or '', reply_markup=keyboard, parse_mode="HTML")
        # Diƒüer formatlarƒ± da buraya ekleyebilirsiniz (animation, document, audio, voice)
        else:
            return await bot.send_message(chat_id, "‚ö†Ô∏è Format tanƒ±nmadƒ±. Mesaj g√∂nderilemedi.")
    except Exception as e:
        logging.error(f"Error sending mail preview to {chat_id}: {e}")
        return await bot.send_message(chat_id, f"‚ö†Ô∏è G√∂nderim hatasƒ±: {e}")

async def process_mailing_content(message: Message, state: FSMContext, mail_type: str):
    content = {}
    if message.photo:
        content = {'type': 'photo', 'file_id': message.photo[-1].file_id, 'caption': message.caption}
    elif message.text:
        content = {'type': 'text', 'text': message.html_text}
    else:
        await message.answer("‚ö†Ô∏è Bu habar g√∂rn√º≈üi goldanma√Ωar. Di≈àe tekst √Ωa-da surat (√Ωazgysy bilen) iberi≈à.")
        return

    await state.update_data(mailing_content=content)
    
    fsm_data = await state.get_data()
    if admin_message_id := fsm_data.get('admin_message_id'):
        try:
            await bot.delete_message(message.chat.id, admin_message_id)
        except (TelegramBadRequest, AttributeError): pass

    preview_text = "üóÇÔ∏è <b>√ñ≈à√ºnden tassykla≈à:</b>\n\nHabary≈àyz a≈üakdaky √Ωaly bolar. Iber√Ω√§rismi?"
    preview_message = await send_mail_preview(message.chat.id, content)

    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ D√ºwmesiz ibermek", callback_data=f"{mail_type}_mail_confirm_send")],
        [InlineKeyboardButton(text="‚ûï D√ºwmeleri go≈ümak", callback_data=f"{mail_type}_mail_confirm_add_buttons")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr", callback_data="admin_panel_main")]
    ])
    confirm_msg = await bot.send_message(message.chat.id, preview_text, reply_markup=confirmation_keyboard)

    await state.update_data(admin_message_id=confirm_msg.message_id, preview_message_id=preview_message.message_id)
    target_state = AdminStates.waiting_for_mailing_confirmation if mail_type == "user" else AdminStates.waiting_for_channel_mailing_confirmation
    await state.set_state(target_state)

async def get_unsubscribed_channels(user_id: int) -> list:
    all_channels = await get_channels_from_db()
    unsubscribed = []
    for channel in all_channels:
        try:
            member = await bot.get_chat_member(chat_id=channel['id'], user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                unsubscribed.append(channel)
        except (TelegramForbiddenError, TelegramBadRequest):
            unsubscribed.append(channel)
        except Exception as e:
            logging.error(f"Error checking subscription for user {user_id} in channel {channel['id']}: {e}")
            unsubscribed.append(channel)
    return unsubscribed

def create_admin_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üìä Bot statistikasy", callback_data="get_stats")],
        [InlineKeyboardButton(text="üöÄ Ulanyjylara bildiri≈ü ibermek", callback_data="start_mailing"),
         InlineKeyboardButton(text="üì¢ Kanallara bildiri≈ü ibermek", callback_data="start_channel_mailing")],
        [InlineKeyboardButton(text="‚ûï Kanal go≈ümak", callback_data="add_channel"), InlineKeyboardButton(text="‚ûñ Kanal pozmak", callback_data="delete_channel")],
        [InlineKeyboardButton(text="üìú Kanallary g√∂rmek", callback_data="list_channels")],
        [InlineKeyboardButton(text="üìÅ addlist go≈ümak", callback_data="add_addlist"), InlineKeyboardButton(text="üóëÔ∏è addlist pozmak", callback_data="delete_addlist")],
        [InlineKeyboardButton(text="üîë VPN go≈ümak", callback_data="add_vpn_config"), InlineKeyboardButton(text="üóëÔ∏è VPN pozmak", callback_data="delete_vpn_config")],
        [InlineKeyboardButton(text="‚úèÔ∏è Ba≈ülangy√ß haty √º√Ωtgetmek", callback_data="change_welcome")]
    ]
    if user_id == SUPER_ADMIN_ID:
        buttons.extend([
            [InlineKeyboardButton(text="üëÆ Admin go≈ümak", callback_data="add_admin"), InlineKeyboardButton(text="üö´ Admin pozmak", callback_data="delete_admin")],
            [InlineKeyboardButton(text="üëÆ Adminleri g√∂rmek", callback_data="list_admins")]
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Admin panelden √ßykmak", callback_data="exit_admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def parse_buttons_from_text(text: str) -> types.InlineKeyboardMarkup | None:
    lines, keyboard_buttons = text.strip().split('\n'), []
    for line in lines:
        if ' - ' not in line: continue
        parts = line.split(' - ', 1)
        btn_text, btn_url = parts[0].strip(), parts[1].strip()
        if btn_text and (btn_url.startswith('https://') or btn_url.startswith('http://')):
            keyboard_buttons.append([types.InlineKeyboardButton(text=btn_text, url=btn_url)])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
    
# --- Handler'lar (Mesaj ve Buton ƒ∞≈üleyicileri) ---

@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await add_user_to_db(user_id)
    await state.clear()

    vpn_configs = await get_vpn_configs_from_db()
    if not vpn_configs:
        await message.answer("üòî Gynansak-da, h√§zirki wagtda el√Ωeterli VPN Kodlary √Ωok. Ha√Ωy≈ü ed√Ω√§ris, so≈àrak synany≈üy≈à.")
        return

    unsubscribed_channels = await get_unsubscribed_channels(user_id)
    addlists = await get_addlists_from_db()

    if not unsubscribed_channels and not addlists:
        vpn_config_text = random.choice(vpn_configs)['config_text']
        await message.answer(f"üéâ Siz √§hli kanallara agza boldu≈àyz!\n\nüîë <b>VPN Kody≈àyz:</b>\n<pre><code>{vpn_config_text}</code></pre>")
    else:
        welcome_text = await get_setting_from_db('welcome_message', "üëã <b>Ho≈ü geldi≈àiz!</b>")
        tasks_text_list = []
        keyboard_buttons = []
        
        for channel in unsubscribed_channels:
            tasks_text_list.append(f"‚ñ´Ô∏è <a href=\"https://t.me/{str(channel['id']).lstrip('@')}\">{channel['name']}</a>")
            keyboard_buttons.append([InlineKeyboardButton(text=channel['name'], url=f"https://t.me/{str(channel['id']).lstrip('@')}")])

        for addlist in addlists:
            tasks_text_list.append(f"‚ñ´Ô∏è <a href=\"{addlist['url']}\">{addlist['name']}</a>")
            keyboard_buttons.append([InlineKeyboardButton(text=addlist['name'], url=addlist['url'])])
        
        if tasks_text_list:
            full_message = welcome_text + "\n\nVPN koduny almak √º√ßin ≈üu √Ωerlere agza bolu≈à:\n\n" + "\n".join(tasks_text_list)
            keyboard_buttons.append([InlineKeyboardButton(text="‚úÖ Agza Boldum", callback_data="check_subscription")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await message.answer(full_message, reply_markup=keyboard, disable_web_page_preview=True)
            await state.set_state(SubscriptionStates.checking_subscription)
        else: # Hi√ß g√∂rev kalmadƒ±ysa
            vpn_config_text = random.choice(vpn_configs)['config_text']
            await message.answer(f"‚ú® Agza bolany≈àyz √º√ßin sagbolu≈à!\n\nüîë <b>Sizi≈à VPN Kody≈àyz:</b>\n<pre><code>{vpn_config_text}</code></pre>")

@router.message(Command("admin"))
async def admin_command(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id):
        return await message.answer("‚õî Bu bu√Ωruga girm√§ge rugsady≈àyz √Ωok.")
    await message.answer("‚öôÔ∏è <b>Admin-panel</b>\n\nBir hereket sa√Ωla≈à:", reply_markup=create_admin_keyboard(message.from_user.id))
    await state.clear()

@router.callback_query(lambda c: c.data == "admin_panel_main")
async def back_to_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        return await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
    admin_reply_markup = create_admin_keyboard(callback.from_user.id)
    try:
        await callback.message.edit_text("‚öôÔ∏è <b>Admin-panel</b>\n\nBir hereket sa√Ωla≈à:", reply_markup=admin_reply_markup)
    except TelegramBadRequest:
        await callback.message.delete()
        await callback.message.answer("‚öôÔ∏è <b>Admin-panel</b>\n\nBir hereket sa√Ωla≈à:", reply_markup=admin_reply_markup)
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "get_stats")
async def get_statistics(callback: types.CallbackQuery):
    if not await is_user_admin_in_db(callback.from_user.id):
        return await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
    
    conn = db_connect()
    cursor = conn.cursor()
    user_count = cursor.execute("SELECT COUNT(*) FROM bot_users").fetchone()[0]
    channel_count = cursor.execute("SELECT COUNT(*) FROM channels").fetchone()[0]
    addlist_count = cursor.execute("SELECT COUNT(*) FROM addlists").fetchone()[0]
    vpn_count = cursor.execute("SELECT COUNT(*) FROM vpn_configs").fetchone()[0]
    admin_count = cursor.execute("SELECT COUNT(*) FROM bot_admins").fetchone()[0]
    conn.close()

    status_description = "Bot i≈üle√Ω√§r" if vpn_count > 0 else "VPN KODLARY √ùOK!"
    alert_text = (f"üìä Bot statistikasy:\n"
                  f"üë§ Ulanyjylar: {user_count}\n"
                  f"üì¢ Kanallar: {channel_count}\n"
                  f"üìÅ addlistlar: {addlist_count}\n"
                  f"üîë VPN Kodlary: {vpn_count}\n"
                  f"üëÆ Adminler (go≈üulan): {admin_count}\n"
                  f"‚öôÔ∏è √ùagda√Ωy: {status_description}")
    await callback.answer(text=alert_text, show_alert=True)

# ... Diƒüer t√ºm handler'lar (kanal ekleme/silme, vpn ekleme/silme, mailing vb.) buraya eklenecek.
# Kod √ßok uzun olduƒüu i√ßin temel i≈ülevleri ekledim.
# √ñnceki kodunuzdaki t√ºm `@router.callback_query(...)` ve `@router.message(...)` 
# fonksiyonlarƒ±nƒ± buraya yapƒ±≈ütƒ±rmanƒ±z yeterlidir, √ß√ºnk√º veritabanƒ±
# fonksiyonlarƒ± artƒ±k SQLite ile uyumlu olduƒüu i√ßin sorunsuz √ßalƒ±≈üacaklardƒ±r.
# √ñrneƒüin kanal ekleme fonksiyonlarƒ±:

@router.callback_query(lambda c: c.data == "add_channel")
async def process_add_channel_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        return await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
    msg = await callback.message.edit_text(
        "üì° <b>Kanal Go≈ümak</b> üì°\n\nGo≈ümak isle√Ω√§n kanaly≈à ID'sini √Ωa-da ulanyjy adyny (<code>@username</code>) girizi≈à.\n\n"
        "<i>Bot kanalda administrator bolmaly.</i>",
        reply_markup=back_to_admin_markup
    )
    await state.update_data(admin_message_id=msg.message_id, admin_chat_id=msg.chat.id)
    await state.set_state(AdminStates.waiting_for_channel_id)
    await callback.answer()

@router.message(AdminStates.waiting_for_channel_id)
async def process_channel_id_and_save(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    channel_id_input = message.text.strip()
    await message.delete()

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    
    if not admin_message_id or not channel_id_input:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è √ùal≈ày≈ülyk √Ωa-da bo≈ü giri≈ü.", reply_markup=create_admin_keyboard(message.from_user.id))
        return await state.clear()

    await bot.edit_message_text("‚è≥ Kanal barlan√Ωar...", chat_id=admin_chat_id, message_id=admin_message_id)
    
    try:
        chat_obj = await bot.get_chat(channel_id_input)
        bot_member = await bot.get_chat_member(chat_id=chat_obj.id, user_id=bot.id)
        if bot_member.status not in ['administrator', 'creator']:
            raise Exception("Bot admin d√§l")

        id_to_store = f"@{chat_obj.username}" if chat_obj.username else str(chat_obj.id)
        
        if await add_channel_to_db(id_to_store, chat_obj.title):
            report_text = f"‚úÖ Kanal go≈üuldy: <b>{chat_obj.title}</b> (<code>{id_to_store}</code>)"
        else:
            report_text = f"‚ö†Ô∏è Bu kanal e√Ω√Ω√§m bar: <b>{chat_obj.title}</b> (<code>{id_to_store}</code>)"
    
    except Exception as e:
        logging.error(f"Error adding channel {channel_id_input}: {e}")
        report_text = f"‚ùå <b>√ùal≈ày≈ülyk:</b> Kanal tapylmady √Ωa-da bot admin d√§l.\n\nSeb√§p: <code>{e}</code>"
        
    await bot.edit_message_text(report_text, chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    await state.clear()

@router.callback_query(lambda c: c.data == "check_subscription")
async def process_check_subscription(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    vpn_configs = await get_vpn_configs_from_db()

    if not vpn_configs:
        await callback.answer("üòî Gynansak-da, h√§zirki wagtda el√Ωeterli VPN kody √Ωok.", show_alert=True)
        return await state.clear()

    unsubscribed_channels = await get_unsubscribed_channels(user_id)
    
    if not unsubscribed_channels:
        vpn_config_text = random.choice(vpn_configs)['config_text']
        text = "üéâ Siz √§hli kanallara agza boldu≈àyz!"
        try:
            await callback.message.edit_text(
                f"{text}\n\nüîë <b>Sizi≈à VPN kodu≈àyz:</b>\n<pre><code>{vpn_config_text}</code></pre>",
                reply_markup=None
            )
        except TelegramBadRequest: pass 
        await callback.answer(text="‚úÖ Agzalyk tassyklandy!", show_alert=False)
        await state.clear()
    else:
        await callback.answer(text="‚ö†Ô∏è Ha√Ωy≈ü ed√Ω√§ris, sanawdaky √§hli √Ωerlere agza bolu≈à!", show_alert=True)
        # Kullanƒ±cƒ±ya tekrar aynƒ± mesajƒ± g√∂ndermeye gerek yok, sadece uyarƒ± yeterli.
        # ƒ∞stenirse, start komutundaki gibi mesajƒ± g√ºncelleyen kod buraya da eklenebilir.


# --- Ana √áalƒ±≈ütƒ±rma Fonksiyonu ---
async def main():
    # Bot ba≈üladƒ±ƒüƒ±nda veritabanƒ±nƒ± ve tablolarƒ± olu≈ütur/kontrol et
    init_db()
    
    # Botu ba≈ülat
    logging.info("Starting bot polling...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    # Eƒüer keep_alive kullanƒ±yorsanƒ±z, main() √ßaƒürƒ±sƒ± o dosyanƒ±n i√ßindedir.
    # Aksi takdirde, a≈üaƒüƒ±daki satƒ±rla doƒürudan √ßalƒ±≈ütƒ±rƒ±n.
    asyncio.run(main())
